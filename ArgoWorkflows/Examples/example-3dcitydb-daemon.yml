# References:
# - https://github.com/argoproj/argo-workflows/tree/master/examples#daemon-containers
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    hostPath:
      path: /data/host
  arguments:
    parameters:
    - name: persistedVolume   
      value: /within-container-mount-point/

  templates:
  - name: main
    steps:
    # Warning: this assumes that just-split (stage 2) was ran before
    - - name: 3dcitydb-start-db
        template: 3dcitydb-daemon
        arguments:
          parameters:
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"

    - - name: sleep
        template: sleep-template
        arguments:
          parameters:
          - name: number-seconds
            value: "60"

  - name: 3dcitydb-daemon
    daemon: true                        # start 3dcitydb as a daemon
    retryStrategy:
      limit: 10                         # retry container if it fails
    inputs:
      parameters:
      - name: persistedVolume
    container:
      image: tumgis/3dcitydb-postgis:v4.0.2
      env:
        - name: CITYDBNAME
          value: "{{workflow.parameters.database_pg_name}}"
        - name: POSTGRES_PASSWORD
          value: "{{workflow.parameters.database_pg_password}}"
        - name: POSTGRES_USER
          value: "{{workflow.parameters.database_pg_user}}"
        # Hardwired parameters
        # Notice that, in this particular case, this is a particulary lame
        # practice because the following "knowledge" was manually extracted 
        # from a specific set of data and manually burned in this workflow. 
        # Change the input data and the workflow will fail when trying to
        # import data to the DB
        - name: SRID
          value: '3946'
        - name: SRSNAME
          value: 'espg:3946'    
      volumeMounts:
        - name: workdir
          mountPath: "{{inputs.parameters.persistedVolume}}"   
      readinessProbe:                   # wait for readinessProbe to succeed
        # References:
        # - https://argoproj.github.io/argo-workflows/fields/#probe
        # - https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        # - https://github.com/bitnami/charts/issues/2682 (for inspiration)
        exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432

  - name: sleep-template
    inputs:
      parameters:
      - name: number-seconds
    container:
      image: ubuntu:latest
      command: [ "/bin/bash", "-c", "--" ]
      args: [ "sleep {{inputs.parameters.number-seconds}}" ]
