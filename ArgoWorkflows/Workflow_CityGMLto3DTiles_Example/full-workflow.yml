apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    persistentVolumeClaim:
      claimName: vcity-pvc
      readOnly: false
  arguments:
    parameters:
    # This workflow choses to define the parameter values in two locations
    #  - a parameter file that should be passed in argument of the submission 
    #    e.g. `argo submit argo submit <...> --parameter-file params.yaml`
    #, - within this workflow: refer below to the persistedVolume parameter
    #    definition
    # 
    # For both cases, parameter values can be changed at run-time with 
    # the the -p option of `argo submit` e.g.:
    # argo submit parameter.yaml -p persistedVolume="/tmp"
    #
    # persistedVolume value setting belongs in the workflow because it is
    # precisely the concern of this workflow to be aware of such workflow
    # execution related details
    - name: persistedVolume   
      # FIXME: This definition is not DRY because of the volumeMounts
      # sections (refer below): try using 
      # {{workflow.parameters.persistedVolume}}
      # within the respective volumeMounts entries of the containers ?
      value: /within-container-mount-point/

  templates:
  - name: main
    steps:
    - - name: collect-boroughs
        templateRef:
          name: workflow-template-atomic-steps-templaterefs
          template: collect-lyon-data-template
        arguments:
          parameters:
          - name: borough
            value: "{{item}}"
          - name: pattern
            value: "{{workflow.parameters.pattern}}"
          - name: results_dir
            value: "{{workflow.parameters.experiment_output_dir}}/stage_1/{{workflow.parameters.vintage}}/{{item}}_{{workflow.parameters.vintage}}"
          - name: vintage
            value: "{{workflow.parameters.vintage}}"
          - name: dockerRegistryHost
            value: "{{workflow.parameters.dockerRegistryHost}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
        withParam: "{{workflow.parameters.boroughs}}"
            
    - - name: print-collect-file-names
        templateRef:
          name: workflow-template-utils-whalesay-template
          template: whalesay-template
        arguments:
          parameters:
          - name: message
            value: "{{steps.collect-boroughs.outputs.parameters.resulting-filenames}}"
            
    - - name: split-buildings-loop
        templateRef:
          name: workflow-template-atomic-steps-templaterefs
          template: split-buildings-template
        arguments:
          parameters:
          - name: input_filename
            value: "{{workflow.parameters.experiment_output_dir}}/stage_1/{{workflow.parameters.vintage}}/{{item}}_{{workflow.parameters.vintage}}/{{item}}_{{workflow.parameters.pattern}}_{{workflow.parameters.vintage}}.gml"
          - name: output_dir
            value: "{{workflow.parameters.experiment_output_dir}}/stage_2/{{workflow.parameters.vintage}}/{{item}}_{{workflow.parameters.vintage}}"
          - name: output_filename
            value: "{{item}}_{{workflow.parameters.pattern}}_{{workflow.parameters.vintage}}_split.gml"
          - name: dockerRegistryHost
            value: "{{workflow.parameters.dockerRegistryHost}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
        withParam: "{{workflow.parameters.boroughs}}"

    - - name: print-split-file-names
        templateRef:
          name: workflow-template-utils-whalesay-template
          template: whalesay-template
        arguments:
          parameters:
          - name: message
            value: "{{steps.split-buildings-loop.outputs.parameters.resulting-filenames}}"
    
    - - name: strip-gml-loop
        templateRef:
          name: workflow-template-atomic-steps-templaterefs
          template: strip-gml-template
        arguments:
          parameters:
          - name: input_filename
            value: "{{workflow.parameters.experiment_output_dir}}/stage_2/{{workflow.parameters.vintage}}/{{item}}_{{workflow.parameters.vintage}}/{{item}}_{{workflow.parameters.pattern}}_{{workflow.parameters.vintage}}_split.gml"
          - name: output_dir
            value: "{{workflow.parameters.experiment_output_dir}}/stage_3/{{workflow.parameters.vintage}}/{{item}}_{{workflow.parameters.vintage}}"
          - name: output_filename
            value: "{{item}}_{{workflow.parameters.pattern}}_{{workflow.parameters.vintage}}_stripped.gml"
          - name: dockerRegistryHost
            value: "{{workflow.parameters.dockerRegistryHost}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
        withParam: "{{workflow.parameters.boroughs}}"

    - - name: print-file-names
        templateRef:
          name: workflow-template-utils-whalesay-template
          template: whalesay-template
        arguments:
          parameters:
          - name: message
            value: "{{steps.strip-gml-loop.outputs.parameters.resulting-filenames}}"

    - - name: 3dcitydb-start-db-step
        templateRef:
          name: workflow-database-templaterefs
          template: 3dcitydb-daemon
        arguments:
          parameters:
          - name: database_name
            value: "{{workflow.parameters.database_name}}-{{workflow.parameters.vintage}}"
          - name: password
            value: "{{workflow.parameters.database_password}}"
          - name: user
            value: "{{workflow.parameters.database_user}}"
          - name: port
            value: "{{workflow.parameters.database_port}}"

    - - name: client-check-step-post-creation
        # Check the resulting database for the existence of imported content.
        templateRef:
          name: workflow-database-templaterefs
          template: send-command-to-postgres-db-template
        arguments:
          parameters:
          - name: command
            value: "PGPASSWORD={{workflow.parameters.database_password}} psql -h {{steps.3dcitydb-start-db-step.ip}} -p {{workflow.parameters.database_port}} -U {{workflow.parameters.database_user}} -d {{workflow.parameters.database_name}}-{{workflow.parameters.vintage}} -c 'SELECT building.id, BOX3D(cityobject.envelope), cityobject.gmlid FROM citydb.building JOIN citydb.cityobject ON building.id=cityobject.id WHERE building.id=building.building_root_id'"

    - - name: import-bouroughs-to-3dcitydb-step
        templateRef:
          name: workflow-template-aggregated-templaterefs
          template: import-bouroughs-to-3dcitydb-template
        arguments:
          parameters:
          - name: boroughs
            value: "{{workflow.parameters.boroughs}}"
          - name: vintage
            value: "{{workflow.parameters.vintage}}"
          - name: pattern
            value: "{{workflow.parameters.pattern}}"
          - name: experiment_output_dir
            value:  "{{workflow.parameters.experiment_output_dir}}"
          - name: database_name
            value: "{{workflow.parameters.database_name}}"
          - name: database_password
            value: "{{workflow.parameters.database_password}}"
          - name: database_user
            value: "{{workflow.parameters.database_user}}"
          - name: database_port
            value: "{{workflow.parameters.database_port}}"
          - name: database_hostname
            value: "{{steps.3dcitydb-start-db-step.ip}}"
          - name: database_dump
            value: "{{workflow.parameters.database_dump}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
          - name: database_dump_filename
            value: "{{workflow.parameters.experiment_output_dir}}/stage_4/result-{{workflow.parameters.vintage}}-{{workflow.parameters.database_name}}.sql"
  
    - - name: client-check-step-post-importation
        # Check the resulting database for the existence of imported content.
        templateRef:
          name: workflow-database-templaterefs
          template: send-command-to-postgres-db-template
        arguments:
          parameters:
          - name: command
            value: "PGPASSWORD={{workflow.parameters.database_password}} psql -h {{steps.3dcitydb-start-db-step.ip}} -p {{workflow.parameters.database_port}} -U {{workflow.parameters.database_user}} -d {{workflow.parameters.database_name}}-{{workflow.parameters.vintage}} -c 'SELECT building.id, BOX3D(cityobject.envelope), cityobject.gmlid FROM citydb.building JOIN citydb.cityobject ON building.id=cityobject.id WHERE building.id=building.building_root_id'"

    - - name: generate-compute-tileset-configuration-file-step
        templateRef:
          name: workflow-template-atomic-steps-templaterefs
          template: generate-compute-tileset-configuration-file-template
        arguments:
          parameters:
          - name: vintage
            value: "{{workflow.parameters.vintage}}"
          - name: database_name
            value: "{{workflow.parameters.database_name}}-{{workflow.parameters.vintage}}"
          - name: hostname
            value: "{{steps.3dcitydb-start-db-step.ip}}"
          - name: output_directory
            value: "{{workflow.parameters.persistedVolume}}{{workflow.parameters.experiment_output_dir}}/stage_5"
          - name: password
            value: "{{workflow.parameters.database_password}}"
          - name: user
            value: "{{workflow.parameters.database_user}}"
          - name: port
            value: "{{workflow.parameters.database_port}}"
          - name: persistedVolume   
            value: "{{workflow.parameters.persistedVolume}}"

    - - name: compute-tileset-step
        templateRef:
          name: workflow-template-atomic-steps-templaterefs
          template: compute-tileset-template
        arguments:
          parameters:
          - name: configuration_filename
            value: "{{workflow.parameters.experiment_output_dir}}/stage_5/CityTilerDBConfigStatic{{workflow.parameters.vintage}}.yml"
          - name: output_directory
            value: "{{workflow.parameters.experiment_output_dir}}/stage_5"
          - name: dockerRegistryHost
            value: "{{workflow.parameters.dockerRegistryHost}}"
          - name: persistedVolume   
            value: "{{workflow.parameters.persistedVolume}}"
