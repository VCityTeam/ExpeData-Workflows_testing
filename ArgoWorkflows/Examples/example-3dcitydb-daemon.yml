# References:
# - https://github.com/argoproj/argo-workflows/tree/master/examples#daemon-containers
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    hostPath:
      path: /data/host
  arguments:
    parameters:
    - name: database_name
    - name: database_password
    - name: database_user
    - name: persistedVolume   
      value: /within-container-mount-point/

  templates:
  - name: main
    steps:
    - - name: 3dcitydb-start-db
        templateRef:
          name: workflow-database-templaterefs
          template: 3dcitydb-daemon
        arguments:
          parameters:
          - name: database_name
            value: "{{workflow.parameters.database_name}}"
          - name: password
            value: "{{workflow.parameters.database_password}}"
          - name: user
            value: "{{workflow.parameters.database_user}}"
          - name: port
            value: "{{workflow.parameters.database_port}}"

    - - name: client-check
        template: 3dcitydb-client-check-template
        arguments:
          parameters:
          - name: command
            # Immediatly (that is as soon as the argo engine considers the
            # database is up) submit a dummy query (list __all__ tables) just 
            # to check that indeed the database is properly answering.
            # Note: for the syntax on handling the password to psql refer to
            # https://stackoverflow.com/questions/6523019/postgresql-scripting-psql-execution-with-password
            value: "PGPASSWORD={{workflow.parameters.database_password}} psql -h {{steps.3dcitydb-start-db.ip}} -p {{workflow.parameters.database_port}} -U {{workflow.parameters.database_user}} -d {{workflow.parameters.database_name}} -c 'SELECT * FROM pg_catalog.pg_tables'"

  - name: 3dcitydb-client-check-template
    inputs:
      parameters:
      - name: command
    container:
      image: postgres:latest
      imagePullPolicy: IfNotPresent
      command: [ "/bin/bash", "-c" ]
      args: [ "{{inputs.parameters.command}}" ]

