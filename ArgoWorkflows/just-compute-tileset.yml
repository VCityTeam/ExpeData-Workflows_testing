# References:
# - https://github.com/argoproj/argo-workflows/tree/master/examples#daemon-containers
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    persistentVolumeClaim:
      claimName: vcity-pvc
      readOnly: false
  arguments:
    parameters:
    # Numerical experiment related
    - name: boroughs
    - name: pattern
    - name: vintage
    - name: experiment_output_dir
    # Database related
    - name: database_name
    - name: database_password
    - name: database_user
    - name: database_port
    # Depending on your execution context
    - name: dockerRegistryHost
    # Local (to this workflow definition) parameters   
    - name: persistedVolume   
      value: /within-container-mount-point/
    # Derived parameters
    - name: database_dump_filename
      value: "{{workflow.parameters.experiment_output_dir}}/stage_4/result-{{workflow.parameters.vintage}}-{{workflow.parameters.database_name}}.sql"

  templates:
  - name: main
    steps:

    - - name: postgis-start-db
        # Because the purpose of this workflow is to import a 3dCity database
        # dump, we can NOT here start a 3dCityDB image. If we were to do so
        # the importation would fail because reloading the dump, will require
        # the creation of some tables that already exist within the
        # 3DCityDB database: these are the 3DCityDB structural tables as
        # opposed to the 3DCityDB content per se.
        # We thus must start a postgis (empty) database and when loading
        # the previously realised dump
        #  - the structural tables of 3DCityDB will be recreated
        #  - their content will be reloaded 
        templateRef:
          name: workflow-database-templaterefs
          template: postgis-daemon
        arguments:
          parameters:
          - name: database_name
            value: "{{workflow.parameters.database_name}}"
          - name: password
            value: "{{workflow.parameters.database_password}}"
          - name: user
            value: "{{workflow.parameters.database_user}}"
          - name: port
            value: "{{workflow.parameters.database_port}}"

    - - name: import-db-dump-step
        templateRef:
          name: workflow-database-templaterefs
          template: import-db-dump-template
        arguments:
          parameters:
          - name: database_name
            value: "{{workflow.parameters.database_name}}"
          - name: hostname
            value: "{{steps.postgis-start-db.ip}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
          - name: password
            value: "{{workflow.parameters.database_password}}"
          - name: user
            value: "{{workflow.parameters.database_user}}"
          - name: port
            value: "{{workflow.parameters.database_port}}"
          - name: filename
            value: "{{workflow.parameters.database_dump_filename}}"

    - - name: client-check-step
        # Check the resulting database for the existence of imported content.
        templateRef:
          name: workflow-database-templaterefs
          template: send-command-to-postgres-db-template
        arguments:
          parameters:
          - name: command
            value: "PGPASSWORD={{workflow.parameters.database_password}} psql -h {{steps.postgis-start-db.ip}} -p {{workflow.parameters.database_port}} -U {{workflow.parameters.database_user}} -d {{workflow.parameters.database_name}} -c 'SELECT building.id, BOX3D(cityobject.envelope), cityobject.gmlid FROM citydb.building JOIN citydb.cityobject ON building.id=cityobject.id WHERE building.id=building.building_root_id'"

    - - name: generate-compute-tileset-configuration-file-step
        templateRef:
          name: workflow-template-atomic-steps-templaterefs
          template: generate-compute-tileset-configuration-file-template
        arguments:
          parameters:
          - name: vintage
            value: "{{workflow.parameters.vintage}}"
          - name: database_name
            value: "{{workflow.parameters.database_name}}"
          - name: hostname
            value: "{{steps.postgis-start-db.ip}}"
          - name: output_directory
            value: "{{workflow.parameters.persistedVolume}}{{workflow.parameters.experiment_output_dir}}/stage_5"
          - name: password
            value: "{{workflow.parameters.database_password}}"
          - name: user
            value: "{{workflow.parameters.database_user}}"
          - name: port
            value: "{{workflow.parameters.database_port}}"
          - name: persistedVolume   
            value: "{{workflow.parameters.persistedVolume}}"
    
    - - name: compute-tileset-step
        templateRef:
          name: workflow-template-atomic-steps-templaterefs
          template: compute-tileset-template
        arguments:
          parameters:
          - name: configuration_filename
            value: "{{workflow.parameters.experiment_output_dir}}/stage_5/CityTilerDBConfigStatic{{workflow.parameters.vintage}}.yml"
          - name: output_directory
            value: "{{workflow.parameters.experiment_output_dir}}/stage_5"
          - name: dockerRegistryHost
            value: "{{workflow.parameters.dockerRegistryHost}}"
          - name: persistedVolume   
            value: "{{workflow.parameters.persistedVolume}}"
