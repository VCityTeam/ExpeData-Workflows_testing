apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-template-utils-whalesay-template
spec:
  entrypoint: whalesay-template
  templates:
  - name: whalesay-template
    inputs:
      parameters:
      - name: message
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-template-utils-pythonsay-template
spec:
  entrypoint: pythonsay-template
  templates:
  # When whalesay fails/crashes we can use this plan B debug print
  - name: pythonsay-template
    # The usage of the 
    # [following mutex](https://github.com/argoproj/argo-workflows/blob/master/examples/synchronization-mutex-tmpl-level.yaml) 
    # is to constrain a calling workflow that would be a loop (using this template)
    # to be executed sequentially
    synchronization:
      mutex:
        name: pythonsay-mutex-name
    inputs:
      parameters:
      - name: message
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        print("{{inputs.parameters.message}}")
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-template-utils-jsondumpstdout-template
spec:
  entrypoint: jsondumpstdout-template
  templates:
  # When given in input a filepath (that is relative to the
  # persisted volume offered by the workflow) of a json file
  # dump the content of that file to stdout. The typical use case
  # is for debugging the actual content of some json file outputed
  # by a prior step when plugin the input of a downstream step.
  #
  # Note: this template alas has a strong dependency towards the calling
  # workflow through the usage of "{{workflow.parameters.persistedVolume}}".
  # 
  # Note that stdout does not need to be described as output within the
  # "outputs:" field for steps.<calling-template-name>.outputs.result to
  # exist
  - name: jsondumpstdout-template
    inputs:
      parameters:
      - name: persistedVolume
      - name: file-name
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import os
        import json
        import sys
        input_filename=os.path.join(
          "{{inputs.parameters.persistedVolume}}",
          "{{inputs.parameters.file-name}}")
        with open(input_filename, "r") as f:
          data = json.load(f)
        json.dump(data, sys.stdout)
      volumeMounts:
      - name: workdir
        mountPath: "{{inputs.parameters.persistedVolume}}"
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-template-utils-create-directory-templateref
spec:
  entrypoint: create-directory-template
  templates:
  # Create a sub-directory (generaly used to place outputs) of the persisted
  # volume.
  - name: create-directory-template
    inputs:
      parameters:
      - name: directoryName
      - name: persistedVolume
    script:
      image: python:alpine3.6
      command: ["python3"]
      source: |
        import os
        import pathlib
        directory_path=pathlib.Path(
          os.path.join(
            "{{inputs.parameters.persistedVolume}}",
            "{{inputs.parameters.directoryName}}")
          )
        print(f'Creating directory {directory_path}')
        os.makedirs(directory_path, exist_ok=True)
      volumeMounts:
      - name: workdir
        mountPath: "{{inputs.parameters.persistedVolume}}"
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-template-utils-sleep-template
spec:
  entrypoint: sleep-template
  templates:
  - name: sleep-template
    inputs:
      parameters:
      - name: number-seconds
    container:
      image: busybox:latest
      command: [ "sh", "-c", "--" ]
      args: [ "sleep {{inputs.parameters.number-seconds}}" ] 