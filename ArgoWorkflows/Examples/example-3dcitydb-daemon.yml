# References:
# - https://github.com/argoproj/argo-workflows/tree/master/examples#daemon-containers
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    hostPath:
      path: /data/host
  arguments:
    parameters:
    - name: persistedVolume   
      value: /within-container-mount-point/

  templates:
  - name: main
    steps:
    - - name: 3dcitydb-start-db
        template: 3dcitydb-daemon
        arguments:
          parameters:
          - name: database_name
            value: "{{workflow.parameters.database_pg_name}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
          - name: password
            value: "{{workflow.parameters.database_pg_password}}"
          - name: user
            value: "{{workflow.parameters.database_pg_user}}"

    - - name: client-check
        template: 3dcitydb-client-check-template
        arguments:
          parameters:
          - name: command
            # Immediatly (that is as soon as the argo engine considers the
            # database is up) submit a dummy query (list __all__ tables) just 
            # to check that indeed the database is properly answering.
            # Note: for the syntax on handling the password to psql refer to
            # https://stackoverflow.com/questions/6523019/postgresql-scripting-psql-execution-with-password
            value: "PGPASSWORD={{workflow.parameters.database_pg_password}} psql -h {{steps.3dcitydb-start-db.ip}} -p 5432 -U {{workflow.parameters.database_pg_user}} -d {{workflow.parameters.database_pg_name}} -c 'SELECT * FROM pg_catalog.pg_tables'"

  - name: 3dcitydb-daemon
    daemon: true                        # start 3dcitydb as a daemon
    retryStrategy:
      limit: 10                         # retry container if it fails
    inputs:
      parameters:
      - name: persistedVolume
      - name: database_name
      - name: password
      - name: user
    container:
      image: tumgis/3dcitydb-postgis:v4.0.2
      imagePullPolicy: IfNotPresent
      env:
        - name: CITYDBNAME
          value: "{{inputs.parameters.database_name}}"
        - name: POSTGRES_PASSWORD
          value: "{{inputs.parameters.password}}"
        - name: POSTGRES_USER
          value: "{{inputs.parameters.user}}"
        # Hardwired parameters FIXME
        # Notice that, in this particular case, this is a particulary lame
        # practice because the following "knowledge" was manually extracted 
        # from a specific set of data and manually burned in this workflow. 
        # Change the input data and the workflow will fail when trying to
        # import data to the DB
        - name: SRID
          value: '3946'
        - name: SRSNAME
          value: 'espg:3946'    
      volumeMounts:
        - name: workdir
          mountPath: "{{inputs.parameters.persistedVolume}}"   
      readinessProbe:                   # wait for readinessProbe to succeed
        # References:
        # - https://argoproj.github.io/argo-workflows/fields/#probe
        # - https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        # - https://github.com/bitnami/charts/issues/2682 (for inspiration)
        exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432

  - name: 3dcitydb-client-check-template
    inputs:
      parameters:
      - name: command
    container:
      image: postgres:latest
      imagePullPolicy: IfNotPresent
      command: [ "/bin/bash", "-c" ]
      args: [ "{{inputs.parameters.command}}" ]

